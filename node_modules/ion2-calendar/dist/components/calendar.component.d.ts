import { OnInit, EventEmitter, Provider } from '@angular/core';
import { CalendarMonth, CalendarModalOptions, CalendarComponentOptions, CalendarDay, CalendarComponentPayloadTypes, CalendarComponentMonthChange, CalendarComponentTypeProperty } from '../calendar.model';
import { CalendarService } from '../services/calendar.service';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const ION_CAL_VALUE_ACCESSOR: Provider;
interface CompatibleIcons {
    caretDown: string;
    caretUp: string;
    chevronBack: string;
    chevronForward: string;
}
export declare class CalendarComponent implements ControlValueAccessor, OnInit {
    calSvc: CalendarService;
    _d: CalendarModalOptions;
    _options: CalendarComponentOptions;
    _view: 'month' | 'days';
    _calendarMonthValue: CalendarDay[];
    _showToggleButtons: boolean;
    _compatibleIcons: CompatibleIcons;
    showToggleButtons: boolean;
    _showMonthPicker: boolean;
    showMonthPicker: boolean;
    monthOpt: CalendarMonth;
    format: string;
    type: CalendarComponentTypeProperty;
    readonly: boolean;
    change: EventEmitter<CalendarComponentPayloadTypes>;
    monthChange: EventEmitter<CalendarComponentMonthChange>;
    select: EventEmitter<CalendarDay>;
    selectStart: EventEmitter<CalendarDay>;
    selectEnd: EventEmitter<CalendarDay>;
    options: CalendarComponentOptions;
    readonly MONTH_DATE_FORMAT = "MMMM yyyy";
    constructor(calSvc: CalendarService);
    ngOnInit(): void;
    getViewDate(): CalendarComponentPayloadTypes;
    getDate(date: number): Date;
    setViewDate(value: CalendarComponentPayloadTypes): void;
    switchView(): void;
    prev(): void;
    next(): void;
    prevYear(): void;
    nextYear(): void;
    nextMonth(): void;
    canNext(): boolean;
    backMonth(): void;
    canBack(): boolean;
    monthOnSelect(month: number): void;
    onChanged($event: CalendarDay[]): void;
    swipeEvent($event: any): void;
    _onChanged: Function;
    _onTouched: Function;
    _payloadToTimeNumber(value: CalendarComponentPayloadTypes): number;
    _monthFormat(date: number): string;
    private initOpt;
    createMonth(date: number): CalendarMonth;
    _createCalendarDay(value: CalendarComponentPayloadTypes): CalendarDay;
    _handleType(value: number): CalendarComponentPayloadTypes;
    writeValue(obj: any): void;
    registerOnChange(fn: () => {}): void;
    registerOnTouched(fn: () => {}): void;
    _writeValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CalendarComponent, "ion-calendar", never, { "format": "format"; "type": "type"; "readonly": "readonly"; "options": "options"; }, { "change": "change"; "monthChange": "monthChange"; "select": "select"; "selectStart": "selectStart"; "selectEnd": "selectEnd"; }, never, never>;
}
export {};

//# sourceMappingURL=calendar.component.d.ts.map